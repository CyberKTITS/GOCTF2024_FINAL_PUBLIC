#pragma GCC target("avx2")
#pragma GCC optimize("O3,unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#define ull unsigned long long


/*
Имеем дело с lfsr. Стоит рассматривать его как какую-то функцию, которая по заданному ключу выдаст нам рандомные биты.
Генератор рандома кароче.
И сгенерированный stream ксорится с флагом. Причему нам говорят, что флаг только в аскии.
Но в аскии у нас 8 бит каждого символа занулен. А длина шифротекста 33 символа.
Т.е. мы слили 33 бита последовательности, сгенерированной lfsr.
Для проверки каждого ключа нам нужно сгенерировать stream из 33*8 битов, а пространство ключей ограничено 2^33 вариантами.
Асимпотика перебора около 8*33*2^33 ~= 2^41, а это очень много для питона.
Остается написать нормальный перебор на плюсах (для меня совсем не тривиальная задача) и восстановить ключ.
У меня решение нашло ключ за 2-4 минуты и выдало только `FOUND 4581460306`.

Последний шаг - правильно ввести ключ в lfsr:)))

```python
key = int(bin(4581460306)[2:].rjust(33,"0")[::-1],2)
key = [(key>>i)&1 for i in range(33)]
lfsr = LFSR(key, [33, 32, 30, 27])
ct = bytes.fromhex('d1d6b4c617bddb28ab4405a0d8dd801d9b3d6fde58adf49150e6fd3aec5e6bc404')
print(b'CTF{'+bytes(i^lfsr.byte() for i in ct)+b'}')
```
*/

int main(){
    for(ull st=0ull; st<=8589934592ull;st++){
        ull state = st;
        int res=1;
        ull mask = 0b110100100000000000000000000000000ull; //  sum(1<<(i-1) for i in [33, 32, 30, 27])
        ull mt = 8589934591ull; // 2**33-1
        ull check_arr[33] = {1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0};
        // check_arr = [i>>7 for i in bytes.fromhex(ct)]
        for (int i=0; i<264;i++){ // 33*8
            ull c = (state&(ull)(1ull<<32))>>(32);
            ull b = __popcount(state&mask)&1;
            state = ((state<<1)|b)&mt;
            if (i%8==0){
                if (check_arr[i/8]!=c){
                    res = 0;
                    break;
                }
            }
        }
        if (res){
            cout << "FOUND " << st << '\n';
        }
    }
}